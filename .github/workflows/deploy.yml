name: Build and Deploy Backend

on:
  push:
    branches: [ master, main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8

    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/aurifi-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/aurifi-backend:${{ github.sha }}

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd /opt/aurifi
          
          echo "üîÑ Pulling latest backend image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/aurifi-backend:latest
          
          echo "üîÑ Updating backend service..."
          docker compose up -d --no-deps backend
          
          echo "‚è≥ Waiting for backend to be ready..."
          sleep 15
          
          echo "üîÑ Restarting nginx to refresh connections..."
          docker compose restart nginx
          
          echo "üßπ Cleaning up old images..."
          docker image prune -f
          
          echo "üìä Checking service status..."
          docker compose ps
          
          echo "üîç Testing backend connectivity..."
          sleep 10
          curl -f http://localhost/api/v1/user/ || echo "‚ö†Ô∏è  Backend API test failed"
          
          echo "‚úÖ Backend deployed successfully!"